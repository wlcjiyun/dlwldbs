package Day09.Ex2;
/*
	생성자 : 객체를 생성할 때 사용되는 객체의 초기화를 담당함
		- new 생성자()
		- 생성자 선언이 없을 경우 기본 생성자가 자동으로 생성됨
		- ! 생성자의 이름은 클래스와 동일하게 한다
	
	목적
		1. 인수로 받은 데이터 필드 초기화
		2. 필터링/행위
	
	메소드  
		- 인수[매개변수] : 함수 안으로 들어오는 코드/데이터
		- 반환[리턴] : 함수 종료시 호출했던 곳으로 리턴되는 데이터
		
		1. 선언 형태 
			리턴타입 함수명(타입 매개변수1, 매개변수2){
				return 리턴타입 허용 범위 내 데이터
			}
		2. 호출
			- 내부 : 함수명(데이터, 데이터)
			- 외부 : 객체명.함수명(데이터, 데이터)
		
*/

import java.util.ArrayList;

// JVM 메소드 영역에 저장됨
public class 붕어빵틀 { // class S
	
	// 1. 필드
	String 재료1;
	String 재료2;
	
	// 2. 생성자
		// 2-1. 기본 생성자
		public 붕어빵틀() {}
		// 2-2. 필드 1개 생성자
		붕어빵틀(String 재료1){ 
			this.재료1 =재료1;
		}
		// 2-3. 필드 2개 생성자
		붕어빵틀(String 재료1, String 재료2){
			this.재료1 = 재료1;
			this.재료2 = 재료2;
		}
		
	// 3. 메소드
		// 1. toString() 메소드
		@Override
		public String toString() {
			return "붕어빵틀 [재료1=" + 재료1 + ", 재료2=" + 재료2 + "]";
		}
		// 2. 굽기
		void 굽기() { // 리턴타입(void)이 없다 / 인수없다
			System.out.println("붕어빵을 굽습니다.");
		}
		// 3. 붕어빵 속 변경
		void 변경(String 재료1, String 재료2) { // 리턴타입(void)없다 / 인수 2개 있다
			this.재료1 = 재료1;
			this.재료2 = 재료2;
			System.out.println("붕어빵 속이 변경되었습니다");
		}
		// 4. 붕어빵 판매가
		int 판매가() { // 리턴타입(타입)있다 / 인수없다 
			return 3000;
		}
		// 5. 붕어빵 판매
		붕어빵틀 판매() { // 객체도 반환이 가능함
			붕어빵틀 붕어빵 = new 붕어빵틀();
			return 붕어빵;
		}
		void 확인(붕어빵틀 붕어빵) {
			System.out.println(붕어빵);
		}
		
		ArrayList<붕어빵틀> 여러개판매(int 개수){
			ArrayList<붕어빵틀> 붕어빵포장종이 = new ArrayList<>();
			for(int i = 0; i<개수; i++) {
				붕어빵포장종이.add(판매());
			}
			return 붕어빵포장종이;
		}
	
} // class E
